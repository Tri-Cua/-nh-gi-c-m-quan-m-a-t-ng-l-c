import streamlit as st
import pandas as pd
from datetime import datetime
import gspread
from gspread_dataframe import set_with_dataframe
import io
import os
from pytz import timezone
import streamlit.components.v1 as components
import json

# --- CONFIGURATION & SETUP ---

st.set_page_config(
    page_title="ƒê√°nh gi√° c·∫£m quan s·∫£n ph·∫©m",
    page_icon="üß™",
    layout="centered"
)

# --- HELPER FUNCTION (NEW, MORE RELIABLE METHOD) ---
def scroll_to_top():
    """
    Injects JavaScript to navigate to a hidden anchor link at the top of the page.
    This is a more reliable method for scrolling in Streamlit than using scrollTo.
    """
    components.html(
        """
        <script>
            window.location.href = '#top';
        </script>
        """,
        height=0
    )


# --- GOOGLE SHEETS CONNECTION (IMPROVED & SECURE) ---

def connect_to_google_sheets():
    """
    Connects to Google Sheets using service account credentials
    stored in Streamlit's secrets management.
    """
    try:
        creds_json = st.secrets["gcp_service_account"]
        sa = gspread.service_account_from_dict(creds_json)
        return sa
    except Exception as e:
        st.error(f"L·ªói k·∫øt n·ªëi v·ªõi Google Sheets: Kh√¥ng th·ªÉ t√¨m th·∫•y th√¥ng tin x√°c th·ª±c trong st.secrets. Vui l√≤ng ki·ªÉm tra l·∫°i. L·ªói: {e}")
        return None

def append_to_google_sheet(dataframe, sheet_id, client):
    """
    Appends a DataFrame to a specified Google Sheet without overwriting existing data.
    """
    if client is None:
        st.error("Kh√¥ng th·ªÉ ghi v√†o Google Sheet do k·∫øt n·ªëi kh√¥ng th√†nh c√¥ng.")
        return

    try:
        sheet = client.open_by_key(sheet_id)
        worksheet = sheet.get_worksheet(0)
        existing_headers = worksheet.row_values(1)
        
        if not existing_headers:
            set_with_dataframe(worksheet, dataframe)
            return

        new_headers = [h for h in dataframe.columns if h not in existing_headers]
        if new_headers:
            last_col = len(existing_headers)
            worksheet.update(range_name=gspread.utils.rowcol_to_a1(1, last_col + 1), values=[new_headers])
            existing_headers.extend(new_headers)

        # Fill missing columns in dataframe with None to match sheet headers
        for header in existing_headers:
            if header not in dataframe.columns:
                dataframe[header] = None

        ordered_df = dataframe[existing_headers]
        values_to_append = ordered_df.values.tolist()
        worksheet.append_rows(values_to_append, value_input_option='USER_ENTERED')

    except gspread.exceptions.SpreadsheetNotFound:
        st.error(f"L·ªói: Kh√¥ng t√¨m th·∫•y Google Sheet v·ªõi ID: {sheet_id}")
    except Exception as e:
        st.error(f"‚ùå L·ªói khi ghi v√†o Google Sheet: {e}")


# --- DATA LOADING ---

@st.cache_data
def load_user_data():
    """
    Loads user login data from an Excel file.
    """
    try:
        df = pd.read_excel("Th·ª© t·ª± c√¢u h·ªèi M√≠a tƒÉng l·ª±c.xlsx")
        df.columns = ["username", "password", "order"]
        df['password'] = df['password'].astype(str)
        return df
    except FileNotFoundError:
        st.error("L·ªói: Kh√¥ng t√¨m th·∫•y file 'Th·ª© t·ª± c√¢u h·ªèi M√≠a tƒÉng l·ª±c.xlsx'. Vui l√≤ng ƒë·∫£m b·∫£o file n√†y t·ªìn t·∫°i trong c√πng th∆∞ m·ª•c v·ªõi ·ª©ng d·ª•ng.")
        return pd.DataFrame(columns=["username", "password", "order"])


# --- MAIN APP LOGIC ---

def main():
    # --- Create an invisible anchor at the top of the page ---
    st.markdown('<a id="top"></a>', unsafe_allow_html=True)
    
    st.title("üîç ƒê√°nh gi√° c·∫£m quan s·∫£n ph·∫©m")
    user_df = load_user_data()

    # --- SESSION STATE INITIALIZATION ---
    if "current_view" not in st.session_state:
        st.session_state.current_view = "login"
    if "partial_results" not in st.session_state:
        st.session_state.partial_results = []
    if "current_sample_index" not in st.session_state:
        st.session_state.current_sample_index = 0

    # --- VIEW: LOGIN ---
    if st.session_state.current_view == "login":
        st.subheader("ƒêƒÉng nh·∫≠p")
        with st.form("login_form"):
            username = st.text_input("T√™n ƒëƒÉng nh·∫≠p")
            password = st.text_input("M·∫≠t kh·∫©u", type="password")
            submitted = st.form_submit_button("ƒêƒÉng nh·∫≠p")

            if submitted:
                password_str = str(password)
                user_match = user_df[(user_df.username == username) & (user_df.password == password_str)]
                if not user_match.empty:
                    st.session_state.logged_in = True
                    st.session_state.user = username
                    st.session_state.current_view = "user_info"
                    st.success("ƒêƒÉng nh·∫≠p th√†nh c√¥ng!")
                    st.rerun()
                else:
                    st.error("Sai t√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u.")

    # --- VIEW: USER INFO ---
    elif st.session_state.current_view == "user_info":
        scroll_to_top()
        st.subheader(f"Th√¥ng tin ng∆∞·ªùi tham gia (Ch√†o {st.session_state.get('user', '')})")
        with st.form("user_info_form"):
            full_name = st.text_input("H·ªç v√† t√™n:")
            gender = st.selectbox("Gi·ªõi t√≠nh:", ["Nam", "N·ªØ", "Kh√°c"])
            age_input = st.text_input("Tu·ªïi (vui l√≤ng nh·∫≠p s·ªë):")
            occupation = st.radio("Ngh·ªÅ nghi·ªáp c·ªßa b·∫°n l√† g√¨?", ["Sinh vi√™n", "Nh√¢n vi√™n vƒÉn ph√≤ng", "Doanh nh√¢n", "Lao ƒë·ªông t·ª± do", "Ngh·ªÅ nghi·ªáp kh√°c"], index=None)
            frequency = st.radio("T·∫ßn su·∫•t s·ª≠ d·ª•ng n∆∞·ªõc tƒÉng l·ª±c ƒë√≥ng lon c·ªßa b·∫°n?", ["6 l·∫ßn/ tu·∫ßn", "5 l·∫ßn/ tu·∫ßn", "4 l·∫ßn/ tu·∫ßn", "3 l·∫ßn/ tu·∫ßn", "2 l·∫ßn/tu·∫ßn", "1 l·∫ßn/ tu·∫ßn", "√≠t h∆°n 1 l·∫ßn/ tu·∫ßn"], index=None)

            submitted = st.form_submit_button("Ti·∫øp t·ª•c")
            if submitted:
                age = int(age_input) if age_input.isdigit() and int(age_input) > 0 else None
                if not age: st.warning("‚ö†Ô∏è Tu·ªïi ph·∫£i l√† m·ªôt s·ªë nguy√™n d∆∞∆°ng.")
                if not all([full_name, occupation, frequency, age]):
                    st.error("‚ùå Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß t·∫•t c·∫£ th√¥ng tin.")
                else:
                    st.session_state.user_info = {"full_name": full_name, "gender": gender, "age": age, "occupation": occupation, "frequency": frequency}
                    st.session_state.current_view = "instructions"
                    st.rerun()

    # --- VIEW: INSTRUCTIONS ---
    elif st.session_state.current_view == "instructions":
        scroll_to_top()
        st.markdown("""
        <h2 style='text-align: center;'>H∆∞·ªõng d·∫´n c·∫£m quan</h2>
        <p>Anh/Ch·ªã s·∫Ω ƒë∆∞·ª£c nh·∫≠n c√°c m·∫´u n∆∞·ªõc tƒÉng l·ª±c ƒë∆∞·ª£c g√°n m√£ s·ªë, vui l√≤ng ƒë√°nh gi√° l·∫ßn l∆∞·ª£t c√°c m·∫´u t·ª´ tr√°i sang ph·∫£i theo th·ª© t·ª± ƒë√£ cung c·∫•p. Anh/Ch·ªã vui l√≤ng ƒë√°nh gi√° m·ªói m·∫´u theo tr√¨nh t·ª± sau:</p>
        <ol>
            <li>D√πng th·ª≠ s·∫£n ph·∫©m v√† ƒë√°nh gi√° c∆∞·ªùng ƒë·ªô c√°c t√≠nh ch·∫•t <b>M√ÄU S·∫ÆC</b>, <b>M√ôI</b> v√† <b>H∆Ø∆†NG V·ªä</b>.</li>
            <li>Cho bi·∫øt c∆∞·ªùng ƒë·ªô c·ªßa m·ªói t√≠nh ch·∫•t m√† anh/ch·ªã cho l√† l√Ω t∆∞·ªüng (c∆∞·ªùng ƒë·ªô m√† anh/ch·ªã mong mu·ªën cho s·∫£n ph·∫©m n∆∞·ªõc tƒÉng l·ª±c n√†y).</li>
            <li>N·∫øu c∆∞·ªùng ƒë·ªô t√≠nh ch·∫•t c·ªßa m·∫´u ph√π h·ª£p v·ªõi mong mu·ªën c·ªßa anh/ch·ªã, vui l√≤ng ch·ªçn c∆∞·ªùng ƒë·ªô l√Ω t∆∞·ªüng b·∫±ng v·ªõi c∆∞·ªùng ƒë·ªô t√≠nh ch·∫•t c·ªßa m·∫´u.</li>
            <li>Cho bi·∫øt ƒë·ªô ∆∞a th√≠ch chung ƒë·ªëi v·ªõi m·∫´u s·∫£n ph·∫©m n√†y.</li>
        </ol>
        <p><b style='color:red;'>L∆ØU √ù:</b></p>
        <ul>
            <li>Anh/ch·ªã l∆∞u √Ω s·ª≠ d·ª•ng n∆∞·ªõc v√† b√°nh ƒë·ªÉ thanh v·ªã tr∆∞·ªõc v√† sau m·ªói m·∫´u th·ª≠.</li>
            <li>Anh/ch·ªã vui l√≤ng kh√¥ng trao ƒë·ªïi trong qu√° tr√¨nh ƒë√°nh gi√° m·∫´u.</li>
            <li>Anh/ch·ªã vui l√≤ng li√™n h·ªá v·ªõi th·ª±c nghi·ªám vi√™n n·∫øu c√≥ b·∫•t k√¨ th·∫Øc m·∫Øc n√†o trong qu√° tr√¨nh ƒë√°nh gi√°.</li>
        </ul>
        """, unsafe_allow_html=True)
        if st.button("B·∫Øt ƒë·∫ßu ƒë√°nh gi√°", type="primary"):
            st.session_state.current_view = "evaluation"
            st.rerun()

    # --- VIEW: EVALUATION ---
    elif st.session_state.current_view == "evaluation":
        scroll_to_top()
        user_row = user_df[user_df.username == st.session_state.get('user')]
        if user_row.empty: st.error("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y th√¥ng tin m·∫´u."); st.stop()
        
        user_order_str = user_row["order"].values[0].replace("‚Äì", "-")
        sample_codes = [code.strip() for code in user_order_str.split("-")]
        idx = st.session_state.current_sample_index

        if idx < len(sample_codes):
            sample = sample_codes[idx]
            st.subheader(f"ƒê√°nh gi√° m·∫´u: {sample} ({idx + 1}/{len(sample_codes)})")
            with st.form(key=f"form_{sample}"):
                rating = {}
                attributes = ["M√†u s·∫Øc", "H∆∞∆°ng s·∫£n ph·∫©m", "V·ªã ng·ªçt", "V·ªã chua", "V·ªã ƒë·∫Øng", "V·ªã ch√°t", "H·∫≠u v·ªã"]
                for attr in attributes:
                    st.markdown(f"<h5>üî∏ {attr}</h5>", unsafe_allow_html=True)
                    c1, c2 = st.columns(2)
                    rating[f"{attr} - C∆∞·ªùng ƒë·ªô m·∫´u"] = c1.slider("C∆∞·ªùng ƒë·ªô trong m·∫´u", 1, 100, 50, key=f"{sample}_{attr}_s")
                    rating[f"{attr} - C∆∞·ªùng ƒë·ªô l√Ω t∆∞·ªüng"] = c2.slider("C∆∞·ªùng ƒë·ªô l√Ω t∆∞·ªüng", 1, 100, 50, key=f"{sample}_{attr}_i")
                    st.markdown("<hr style='margin: 0.5rem 0;'>", unsafe_allow_html=True)
                
                preference_options = [
                    "1 - C·ª±c k·ª≥ kh√¥ng th√≠ch", "2 - R·∫•t kh√¥ng th√≠ch", "3 - Kh√¥ng th√≠ch",
                    "4 - T∆∞∆°ng ƒë·ªëi kh√¥ng th√≠ch", "5 - Kh√¥ng th√≠ch c≈©ng kh√¥ng gh√©t", "6 - T∆∞∆°ng ƒë·ªëi th√≠ch",
                    "7 - Th√≠ch", "8 - R·∫•t th√≠ch", "9 - C·ª±c k·ª≥ th√≠ch"
                ]
                preference = st.radio("ƒêi·ªÉm ∆∞a th√≠ch chung", preference_options, key=f"{sample}_pref", index=None)
                
                if st.form_submit_button("Ti·∫øp t·ª•c"):
                    if not preference: st.error("‚ùå Vui l√≤ng ch·ªçn m·ª©c ƒë·ªô ∆∞a th√≠ch chung.");
                    else:
                        full_record = {"username": st.session_state.user, "sample": sample, **st.session_state.user_info, "timestamp": datetime.now(timezone("Asia/Ho_Chi_Minh")).strftime("%Y-%m-%d %H:%M:%S"), **rating, "∆Øa th√≠ch chung": int(preference.split(" ")[0])}
                        st.session_state.partial_results.append(full_record)
                        st.session_state.current_sample_index += 1
                        st.rerun()
        else:
            st.session_state.current_view = "ranking"
            st.rerun()

    # --- VIEW: RANKING ---
    elif st.session_state.current_view == "ranking":
        scroll_to_top()
        st.subheader("Th·ª© h·∫°ng c√°c s·∫£n ph·∫©m")
        st.caption("H√£y s·∫Øp x·∫øp c√°c s·∫£n ph·∫©m theo th·ª© t·ª± ngon nh·∫•t ƒë·∫øn k√©m ngon nh·∫•t")

        user_row = user_df[user_df.username == st.session_state.get('user')]
        user_order_str = user_row["order"].values[0].replace("‚Äì", "-")
        sample_codes = sorted([code.strip() for code in user_order_str.split("-")])
        
        rank_titles = ["Ngon nh·∫•t", "Th·ª© hai", "Th·ª© ba", "Th·ª© 4", "Th·ª© 5"]
        num_ranks = len(sample_codes)
        options = ["---Ch·ªçn---"] + sample_codes

        with st.form("ranking_form"):
            selections = {}
            cols = st.columns(num_ranks)
            for i in range(num_ranks):
                with cols[i]:
                    selections[rank_titles[i]] = st.selectbox(f"**{rank_titles[i]}**", options=options, key=f"rank_{i}")

            if st.form_submit_button("X√°c nh·∫≠n v√† Ho√†n th√†nh"):
                chosen_ranks = list(selections.values())
                if "---Ch·ªçn---" in chosen_ranks:
                    st.error("‚ùå Vui l√≤ng x·∫øp h·∫°ng cho t·∫•t c·∫£ c√°c m·ª•c.")
                elif len(set(chosen_ranks)) != len(chosen_ranks):
                    st.error("‚ùå M·ªói s·∫£n ph·∫©m ch·ªâ ƒë∆∞·ª£c ch·ªçn m·ªôt l·∫ßn. Vui l√≤ng ki·ªÉm tra l·∫°i.")
                else:
                    ranking_data = {f"Th·ª© h·∫°ng - {title}": rank for title, rank in selections.items()}
                    if st.session_state.partial_results:
                         st.session_state.partial_results[0].update(ranking_data)
                    
                    st.session_state.current_view = "thank_you"
                    st.success("C·∫£m ∆°n b·∫°n ƒë√£ ho√†n th√†nh ph·∫ßn x·∫øp h·∫°ng!")
                    st.rerun()

    # --- VIEW: THANK YOU & SUBMIT ---
    elif st.session_state.current_view == "thank_you":
        scroll_to_top()
        st.success("‚úÖ B·∫°n ƒë√£ ho√†n th√†nh t·∫•t c·∫£ c√°c m·∫´u!")
        st.balloons()
        
        df_results = pd.DataFrame(st.session_state.partial_results)
        
        st.subheader("B·∫£ng k·∫øt qu·∫£ c·ªßa b·∫°n")
        st.dataframe(df_results)
        
        gspread_client = connect_to_google_sheets()
        if gspread_client:
            sheet_id = "13XRlhwoQY-ErLy75l8B0fOv-KyIoO6p_VlzkoUnfUl0"
            st.info("ƒêang l∆∞u k·∫øt qu·∫£ v√†o Google Sheet...")
            append_to_google_sheet(df_results, sheet_id, gspread_client)
            st.success("‚úÖ ƒê√£ l∆∞u k·∫øt qu·∫£ v√†o Google Sheet th√†nh c√¥ng!")

        towrite = io.BytesIO()
        df_results.to_excel(towrite, index=False, engine='openpyxl')
        towrite.seek(0)
        st.download_button(label="üì• T·∫£i k·∫øt qu·∫£ v·ªÅ m√°y", data=towrite, file_name=f"ket_qua_{st.session_state.user}.xlsx", mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
        st.info("C·∫£m ∆°n b·∫°n ƒë√£ tham gia! Vui l√≤ng ƒë√≥ng c·ª≠a s·ªï n√†y.")

if __name__ == "__main__":
    main()
