import dash
from dash import dcc, html, Input, Output, State, callback, no_update
import dash_bootstrap_components as dbc
import pandas as pd
from datetime import datetime
import gspread
from gspread_dataframe import set_with_dataframe
import io
import os
from pytz import timezone
import base64

# --- INITIALIZE THE DASH APP ---
# Using a Bootstrap theme for a clean look
app = dash.Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP])
server = app.server # Expose server for deployment

# --- DATA LOADING ---
# This function is the same as before, but without the Streamlit cache decorator
def load_user_data():
    """
    Loads user login data from an Excel file.
    """
    try:
        df = pd.read_excel("Th·ª© t·ª± c√¢u h·ªèi M√≠a tƒÉng l·ª±c.xlsx")
        df.columns = ["username", "password", "order"]
        df['password'] = df['password'].astype(str)
        return df
    except FileNotFoundError:
        # In a Dash app, we handle the error directly in the layout
        return None

# --- GOOGLE SHEETS CONNECTION ---
def connect_to_google_sheets():
    """
    Connects to Google Sheets using a local credentials.json file.
    NOTE: For production, use environment variables instead of a file.
    """
    try:
        # For this version, we read a local file named 'credentials.json'
        # This file should be in the same directory as your app.py
        client = gspread.service_account(filename="credentials.json")
        return client
    except Exception as e:
        print(f"L·ªói k·∫øt n·ªëi Google Sheets: {e}")
        return None

def append_to_google_sheet(dataframe, sheet_id, client):
    """
    Appends a DataFrame to a specified Google Sheet.
    """
    if client is None: return
    try:
        sheet = client.open_by_key(sheet_id)
        worksheet = sheet.get_worksheet(0)
        existing_headers = worksheet.row_values(1)
        
        if not existing_headers:
            set_with_dataframe(worksheet, dataframe)
            return

        new_headers = [h for h in dataframe.columns if h not in existing_headers]
        if new_headers:
            last_col = len(existing_headers)
            worksheet.update(range_name=gspread.utils.rowcol_to_a1(1, last_col + 1), values=[new_headers])
            existing_headers.extend(new_headers)

        for header in existing_headers:
            if header not in dataframe.columns:
                dataframe[header] = None

        ordered_df = dataframe[existing_headers]
        values_to_append = ordered_df.values.tolist()
        worksheet.append_rows(values_to_append, value_input_option='USER_ENTERED')
        print("ƒê√£ l∆∞u k·∫øt qu·∫£ v√†o Google Sheet th√†nh c√¥ng!")
    except Exception as e:
        print(f"L·ªói khi ghi v√†o Google Sheet: {e}")

# --- APP LAYOUT ---
# The layout is the structure of your web page.
# We use dcc.Store to keep track of the app's state between callbacks (like st.session_state)
app.layout = dbc.Container([
    # Hidden stores to hold session data
    dcc.Store(id='session-store', storage_type='session'), # Stores user, view, etc.
    dcc.Store(id='results-store', storage_type='session'), # Stores evaluation results

    # Div to act as a trigger for scrolling
    html.Div(id='scroll-trigger', style={'display': 'none'}),

    # Main content area
    html.Div([
        html.H1("üîç ƒê√°nh gi√° c·∫£m quan s·∫£n ph·∫©m", className="text-center my-4"),
        html.Div(id='page-content') # The content will change based on the current view
    ])
], fluid=True)


# --- CALLBACKS TO MANAGE VIEWS AND LOGIC ---
# Callbacks are functions that are automatically called by Dash whenever a
# component's property changes, like a button being clicked.

@callback(
    Output('page-content', 'children'),
    Output('session-store', 'data'),
    Output('scroll-trigger', 'children'),
    Input('session-store', 'data'),
)
def render_page_content(session_data):
    """
    This is the main "router" of the app. It decides which view to show
    based on the 'current_view' value in the session data.
    """
    # Initialize session data if it's empty
    if not session_data:
        session_data = {
            'current_view': 'login',
            'user': None,
            'user_info': None,
            'sample_index': 0
        }

    view = session_data.get('current_view')
    user_df = load_user_data()

    if user_df is None:
        return dbc.Alert("L·ªói: Kh√¥ng t√¨m th·∫•y file 'Th·ª© t·ª± c√¢u h·ªèi M√≠a tƒÉng l·ª±c.xlsx'. Vui l√≤ng ƒë·∫£m b·∫£o file n√†y t·ªìn t·∫°i trong c√πng th∆∞ m·ª•c v·ªõi ·ª©ng d·ª•ng.", color="danger"), no_update, no_update

    # --- RENDER LOGIN VIEW ---
    if view == 'login':
        login_layout = dbc.Row(dbc.Col(dbc.Card([
            dbc.CardHeader("ƒêƒÉng nh·∫≠p"),
            dbc.CardBody([
                dbc.Input(id='login-username', placeholder='T√™n ƒëƒÉng nh·∫≠p', type='text', className="mb-3"),
                dbc.Input(id='login-password', placeholder='M·∫≠t kh·∫©u', type='password', className="mb-3"),
                dbc.Button("ƒêƒÉng nh·∫≠p", id='login-button', color='primary', n_clicks=0, className="w-100"),
                html.Div(id='login-error', className="mt-3")
            ])
        ]), width=12, md=6, lg=4), justify="center")
        return login_layout, session_data, no_update

    # --- RENDER USER INFO VIEW ---
    elif view == 'user_info':
        info_layout = dbc.Card([
            dbc.CardHeader(f"Th√¥ng tin ng∆∞·ªùi tham gia (Ch√†o {session_data.get('user')})"),
            dbc.CardBody([
                dbc.Row([
                    dbc.Col(dbc.Input(id='info-name', placeholder='H·ªç v√† t√™n', className="mb-3"), width=12),
                    dbc.Col(dbc.Select(id='info-gender', options=["Nam", "N·ªØ", "Kh√°c"], placeholder="Gi·ªõi t√≠nh", className="mb-3"), width=6),
                    dbc.Col(dbc.Input(id='info-age', placeholder='Tu·ªïi', type='number', min=1, step=1, className="mb-3"), width=6),
                ]),
                html.P("Ngh·ªÅ nghi·ªáp c·ªßa b·∫°n l√† g√¨?"),
                dbc.RadioItems(id='info-occupation', options=["Sinh vi√™n", "Nh√¢n vi√™n vƒÉn ph√≤ng", "Doanh nh√¢n", "Lao ƒë·ªông t·ª± do", "Ngh·ªÅ nghi·ªáp kh√°c"], inline=True, className="mb-3"),
                html.P("T·∫ßn su·∫•t s·ª≠ d·ª•ng n∆∞·ªõc tƒÉng l·ª±c ƒë√≥ng lon c·ªßa b·∫°n?"),
                dbc.RadioItems(id='info-frequency', options=["6 l·∫ßn/ tu·∫ßn", "5 l·∫ßn/ tu·∫ßn", "4 l·∫ßn/ tu·∫ßn", "3 l·∫ßn/ tu·∫ßn", "2 l·∫ßn/tu·∫ßn", "1 l·∫ßn/ tu·∫ßn", "√≠t h∆°n 1 l·∫ßn/ tu·∫ßn"], inline=True, className="mb-3"),
                dbc.Button("Ti·∫øp t·ª•c", id='info-button', color='primary', n_clicks=0, className="w-100"),
                html.Div(id='info-error', className="mt-3")
            ])
        ])
        return info_layout, session_data, datetime.now().isoformat() # Trigger scroll

    # --- RENDER INSTRUCTIONS VIEW ---
    elif view == 'instructions':
        instructions_layout = dbc.Card([
            dbc.CardHeader("H∆∞·ªõng d·∫´n c·∫£m quan"),
            dbc.CardBody([
                html.P("Anh/Ch·ªã s·∫Ω ƒë∆∞·ª£c nh·∫≠n c√°c m·∫´u n∆∞·ªõc tƒÉng l·ª±c ƒë∆∞·ª£c g√°n m√£ s·ªë, vui l√≤ng ƒë√°nh gi√° l·∫ßn l∆∞·ª£t c√°c m·∫´u t·ª´ tr√°i sang ph·∫£i theo th·ª© t·ª± ƒë√£ cung c·∫•p. Anh/Ch·ªã vui l√≤ng ƒë√°nh gi√° m·ªói m·∫´u theo tr√¨nh t·ª± sau:"),
                html.Ol([
                    html.Li("D√πng th·ª≠ s·∫£n ph·∫©m v√† ƒë√°nh gi√° c∆∞·ªùng ƒë·ªô c√°c t√≠nh ch·∫•t M√ÄU S·∫ÆC, M√ôI v√† H∆Ø∆†NG V·ªä."),
                    html.Li("Cho bi·∫øt c∆∞·ªùng ƒë·ªô c·ªßa m·ªói t√≠nh ch·∫•t m√† anh/ch·ªã cho l√† l√Ω t∆∞·ªüng (c∆∞·ªùng ƒë·ªô m√† anh/ch·ªã mong mu·ªën cho s·∫£n ph·∫©m n∆∞·ªõc tƒÉng l·ª±c n√†y)."),
                    html.Li("N·∫øu c∆∞·ªùng ƒë·ªô t√≠nh ch·∫•t c·ªßa m·∫´u ph√π h·ª£p v·ªõi mong mu·ªën c·ªßa anh/ch·ªã, vui l√≤ng ch·ªçn c∆∞·ªùng ƒë·ªô l√Ω t∆∞·ªüng b·∫±ng v·ªõi c∆∞·ªùng ƒë·ªô t√≠nh ch·∫•t c·ªßa m·∫´u."),
                    html.Li("Cho bi·∫øt ƒë·ªô ∆∞a th√≠ch chung ƒë·ªëi v·ªõi m·∫´u s·∫£n ph·∫©m n√†y."),
                ]),
                html.P(html.B("L∆ØU √ù:", style={'color': 'red'})),
                html.Ul([
                    html.Li("Anh/ch·ªã l∆∞u √Ω s·ª≠ d·ª•ng n∆∞·ªõc v√† b√°nh ƒë·ªÉ thanh v·ªã tr∆∞·ªõc v√† sau m·ªói m·∫´u th·ª≠."),
                    html.Li("Anh/ch·ªã vui l√≤ng kh√¥ng trao ƒë·ªïi trong qu√° tr√¨nh ƒë√°nh gi√° m·∫´u."),
                    html.Li("Anh/ch·ªã vui l√≤ng li√™n h·ªá v·ªõi th·ª±c nghi·ªám vi√™n n·∫øu c√≥ b·∫•t k√¨ th·∫Øc m·∫Øc n√†o trong qu√° tr√¨nh ƒë√°nh gi√°."),
                ]),
                dbc.Button("B·∫Øt ƒë·∫ßu ƒë√°nh gi√°", id='start-eval-button', color='primary', n_clicks=0, className="mt-3 w-100"),
            ])
        ])
        return instructions_layout, session_data, datetime.now().isoformat() # Trigger scroll

    # --- RENDER EVALUATION VIEW ---
    elif view == 'evaluation':
        user_row = user_df[user_df.username == session_data['user']]
        user_order_str = user_row["order"].values[0].replace("‚Äì", "-")
        sample_codes = [code.strip() for code in user_order_str.split("-")]
        idx = session_data['sample_index']

        # This view should only render if there are samples left to evaluate.
        # The logic to switch to the 'ranking' view is now in the handle_evaluation callback.
        sample = sample_codes[idx]
        attributes = ["M√†u s·∫Øc", "H∆∞∆°ng s·∫£n ph·∫©m", "V·ªã ng·ªçt", "V·ªã chua", "V·ªã ƒë·∫Øng", "V·ªã ch√°t", "H·∫≠u v·ªã"]
        
        eval_form = [html.H4(f"ƒê√°nh gi√° m·∫´u: {sample} ({idx + 1}/{len(sample_codes)})")]
        for attr in attributes:
            eval_form.extend([
                html.H5(f"üî∏ {attr}", className="mt-4"),
                dbc.Row([
                    dbc.Col([html.Label("C∆∞·ªùng ƒë·ªô trong m·∫´u"), dcc.Slider(1, 100, 1, value=50, id={'type': 'slider-sample', 'index': attr}, marks=None, tooltip={"placement": "bottom", "always_visible": True})]),
                    dbc.Col([html.Label("C∆∞·ªùng ƒë·ªô l√Ω t∆∞·ªüng"), dcc.Slider(1, 100, 1, value=50, id={'type': 'slider-ideal', 'index': attr}, marks=None, tooltip={"placement": "bottom", "always_visible": True})]),
                ]),
                html.Hr()
            ])
        
        preference_options = [
            "1 - C·ª±c k·ª≥ kh√¥ng th√≠ch", "2 - R·∫•t kh√¥ng th√≠ch", "3 - Kh√¥ng th√≠ch",
            "4 - T∆∞∆°ng ƒë·ªëi kh√¥ng th√≠ch", "5 - Kh√¥ng th√≠ch c≈©ng kh√¥ng gh√©t", "6 - T∆∞∆°ng ƒë·ªëi th√≠ch",
            "7 - Th√≠ch", "8 - R·∫•t th√≠ch", "9 - C·ª±c k·ª≥ th√≠ch"
        ]
        eval_form.append(html.Div([
            html.P("ƒêi·ªÉm ∆∞a th√≠ch chung"),
            dbc.RadioItems(id='eval-preference', options=preference_options, className="mb-3")
        ]))
        eval_form.append(dbc.Button("Ti·∫øp t·ª•c", id='eval-button', color='primary', n_clicks=0, className="w-100"))
        eval_form.append(html.Div(id='eval-error', className="mt-3"))

        return html.Div(eval_form), session_data, datetime.now().isoformat() # Trigger scroll

    # --- RENDER RANKING VIEW ---
    elif view == 'ranking':
        user_row = user_df[user_df.username == session_data['user']]
        user_order_str = user_row["order"].values[0].replace("‚Äì", "-")
        sample_codes = sorted([code.strip() for code in user_order_str.split("-")])
        rank_titles = ["Ngon nh·∫•t", "Th·ª© hai", "Th·ª© ba", "Th·ª© 4", "Th·ª© 5"]
        
        cols = []
        for i, title in enumerate(rank_titles[:len(sample_codes)]):
            cols.append(dbc.Col(
                dbc.Card([
                    dbc.CardHeader(title),
                    dbc.CardBody(dcc.Dropdown(sample_codes, id={'type': 'rank-dropdown', 'index': i}))
                ]),
                width=12, md=6, lg=2
            ))
        
        ranking_layout = html.Div([
            html.H4("Th·ª© h·∫°ng c√°c s·∫£n ph·∫©m"),
            html.P("H√£y s·∫Øp x·∫øp c√°c s·∫£n ph·∫©m theo th·ª© t·ª± ngon nh·∫•t ƒë·∫øn k√©m ngon nh·∫•t", className="text-muted"),
            dbc.Row(cols, className="g-3"),
            dbc.Button("X√°c nh·∫≠n v√† Ho√†n th√†nh", id='rank-button', color='success', n_clicks=0, className="mt-4 w-100"),
            html.Div(id='rank-error', className="mt-3")
        ])
        return ranking_layout, session_data, datetime.now().isoformat() # Trigger scroll
    
    # --- RENDER THANK YOU VIEW ---
    elif view == 'thank_you':
        thank_you_layout = dbc.Alert([
            html.H4("‚úÖ B·∫°n ƒë√£ ho√†n th√†nh t·∫•t c·∫£ c√°c m·∫´u!", className="alert-heading"),
            html.P("C·∫£m ∆°n b·∫°n ƒë√£ tham gia! K·∫øt qu·∫£ c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ghi nh·∫≠n."),
            html.Hr(),
            dbc.Button("T·∫£i k·∫øt qu·∫£ v·ªÅ m√°y", id="download-button", color="info"),
            dcc.Download(id="download-dataframe-xlsx")
        ], color="success")
        return thank_you_layout, session_data, datetime.now().isoformat() # Trigger scroll

    return html.Div("L·ªói: Ch·∫ø ƒë·ªô xem kh√¥ng x√°c ƒë·ªãnh."), session_data, no_update


# --- Specific Callbacks for Button Clicks and Logic ---

@callback(
    Output('session-store', 'data', allow_duplicate=True),
    Output('login-error', 'children'),
    Input('login-button', 'n_clicks'),
    State('login-username', 'value'),
    State('login-password', 'value'),
    State('session-store', 'data'),
    prevent_initial_call=True
)
def handle_login(n_clicks, username, password, session_data):
    user_df = load_user_data()
    if user_df is None: return no_update, dbc.Alert("L·ªói file d·ªØ li·ªáu ng∆∞·ªùi d√πng.", color="danger")
    
    user_match = user_df[(user_df.username == username) & (user_df.password == str(password))]
    if not user_match.empty:
        session_data['current_view'] = 'user_info'
        session_data['user'] = username
        return session_data, dbc.Alert("ƒêƒÉng nh·∫≠p th√†nh c√¥ng!", color="success")
    else:
        return no_update, dbc.Alert("Sai t√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u.", color="danger")

@callback(
    Output('session-store', 'data', allow_duplicate=True),
    Output('info-error', 'children'),
    Input('info-button', 'n_clicks'),
    State('info-name', 'value'),
    State('info-gender', 'value'),
    State('info-age', 'value'),
    State('info-occupation', 'value'),
    State('info-frequency', 'value'),
    State('session-store', 'data'),
    prevent_initial_call=True
)
def handle_user_info(n_clicks, name, gender, age, occ, freq, session_data):
    if not all([name, gender, age, occ, freq]):
        return no_update, dbc.Alert("‚ùå Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß t·∫•t c·∫£ th√¥ng tin.", color="warning")
    
    session_data['user_info'] = {
        "full_name": name, "gender": gender, "age": age,
        "occupation": occ, "frequency": freq
    }
    session_data['current_view'] = 'instructions'
    return session_data, None

@callback(
    Output('session-store', 'data', allow_duplicate=True),
    Input('start-eval-button', 'n_clicks'),
    State('session-store', 'data'),
    prevent_initial_call=True
)
def start_evaluation(n_clicks, session_data):
    session_data['current_view'] = 'evaluation'
    return session_data

@callback(
    Output('session-store', 'data', allow_duplicate=True),
    Output('results-store', 'data'),
    Output('eval-error', 'children'),
    Input('eval-button', 'n_clicks'),
    State({'type': 'slider-sample', 'index': dash.ALL}, 'value'),
    State({'type': 'slider-ideal', 'index': dash.ALL}, 'value'),
    State({'type': 'slider-sample', 'index': dash.ALL}, 'id'),
    State('eval-preference', 'value'),
    State('session-store', 'data'),
    State('results-store', 'data'),
    prevent_initial_call=True
)
def handle_evaluation(n_clicks, sample_vals, ideal_vals, attr_ids, preference, session_data, results_data):
    if not preference:
        return no_update, no_update, dbc.Alert("‚ùå Vui l√≤ng ch·ªçn m·ª©c ƒë·ªô ∆∞a th√≠ch chung.", color="warning")
    
    user_df = load_user_data()
    user_row = user_df[user_df.username == session_data['user']]
    user_order_str = user_row["order"].values[0].replace("‚Äì", "-")
    sample_codes = [code.strip() for code in user_order_str.split("-")]
    sample_code = sample_codes[session_data['sample_index']]

    rating = {}
    for i, attr_id in enumerate(attr_ids):
        attr_name = attr_id['index']
        rating[f"{attr_name} - C∆∞·ªùng ƒë·ªô m·∫´u"] = sample_vals[i]
        rating[f"{attr_name} - C∆∞·ªùng ƒë·ªô l√Ω t∆∞·ªüng"] = ideal_vals[i]

    full_record = {
        "username": session_data['user'],
        "sample": sample_code,
        **session_data['user_info'],
        "timestamp": datetime.now(timezone("Asia/Ho_Chi_Minh")).strftime("%Y-%m-%d %H:%M:%S"),
        **rating,
        "∆Øa th√≠ch chung": int(preference.split(" ")[0])
    }
    
    if results_data is None: results_data = []
    results_data.append(full_record)
    
    session_data['sample_index'] += 1
    
    # **FIX**: Check if all samples have been evaluated and change the view.
    if session_data['sample_index'] >= len(sample_codes):
        session_data['current_view'] = 'ranking'

    return session_data, results_data, None

@callback(
    Output('session-store', 'data', allow_duplicate=True),
    Output('results-store', 'data', allow_duplicate=True),
    Output('rank-error', 'children'),
    Input('rank-button', 'n_clicks'),
    State({'type': 'rank-dropdown', 'index': dash.ALL}, 'value'),
    State('session-store', 'data'),
    State('results-store', 'data'),
    prevent_initial_call=True
)
def handle_ranking(n_clicks, ranks, session_data, results_data):
    if not all(ranks):
        return no_update, no_update, dbc.Alert("‚ùå Vui l√≤ng x·∫øp h·∫°ng cho t·∫•t c·∫£ c√°c m·ª•c.", color="warning")
    if len(set(ranks)) != len(ranks):
        return no_update, no_update, dbc.Alert("‚ùå M·ªói s·∫£n ph·∫©m ch·ªâ ƒë∆∞·ª£c ch·ªçn m·ªôt l·∫ßn.", color="warning")

    rank_titles = ["Ngon nh·∫•t", "Th·ª© hai", "Th·ª© ba", "Th·ª© 4", "Th·ª© 5"]
    ranking_data = {f"Th·ª© h·∫°ng - {rank_titles[i]}": rank for i, rank in enumerate(ranks)}
    
    # Add ranking data to the first record
    if results_data:
        results_data[0].update(ranking_data)
        
    # Save to Google Sheet now
    client = connect_to_google_sheets()
    if client:
        df_results = pd.DataFrame(results_data)
        sheet_id = "13XRlhwoQY-ErLy75l8B0fOv-KyIoO6p_VlzkoUnfUl0"
        append_to_google_sheet(df_results, sheet_id, client)
        
    session_data['current_view'] = 'thank_you'
    return session_data, results_data, None

@callback(
    Output("download-dataframe-xlsx", "data"),
    Input("download-button", "n_clicks"),
    State('results-store', 'data'),
    State('session-store', 'data'),
    prevent_initial_call=True,
)
def download_results(n_clicks, results_data, session_data):
    df = pd.DataFrame(results_data)
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df.to_excel(writer, index=False, sheet_name='results')
    data = output.getvalue()
    return dcc.send_bytes(data, f"ket_qua_{session_data.get('user', 'user')}.xlsx")


# --- CLIENT-SIDE CALLBACK FOR SCROLLING ---
# This JavaScript callback runs in the browser. It listens for changes
# on the 'scroll-trigger' div and scrolls the window to the top.
app.clientside_callback(
    """
    function(trigger) {
        if (trigger) {
            setTimeout(function() {
                window.scrollTo({ top: 0, behavior: 'smooth' });
            }, 200);
        }
        return null;
    }
    """,
    Output('scroll-trigger', 'className'), # Dummy output
    Input('scroll-trigger', 'children')
)


# --- RUN THE APP ---
if __name__ == '__main__':
    app.run(debug=True)
